# 3.1 Understanding DNS CNAME records
- name: Append cname to /etc/named/{{dns_zone}}
  ansible.builtin.lineinfile:
    path: /etc/named/{{dns_zone}}
    state: present
    regexp: "{{item}} IN CNAME {{dns_zone}}."
    line: "{{item}} IN CNAME {{dns_zone}}."
  register: cname
  with_items:
  - www
  - proxy
  - wordpress

- name: Update /etc/named/{{dns_zone}} serial
  replace:
    path: /etc/named/{{dns_zone}}
    regexp: '\d{10}'
    replace: "{{ lookup('pipe', 'date +%Y%m%d10') }}" # TODO better increment
  when: cname.changed
  notify:
  - Restart DNS
  - Restart Apache

# 3.2 Virtual Web Hosts Using Apache Web Server
- name: Install httpd using dnf
  yum:
    name: httpd
    state: present

- name: permit traffic on port 8301/tcp
  firewalld:
    port: 80/tcp
    permanent: true
    state: enabled
  notify:
  - Restart firewall

- name: Ensure apache is running
  ansible.builtin.service:
    name: httpd
    state: started
    enabled: true

- name: Create directory /var/www/html/www.{{hostname}}/public_html
  file:
    path: /var/www/html/www.{{hostname}}/public_html
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create /etc/httpd/conf.d/www.{{hostname}}.conf
  template:
    src: www.(vm_name).conf.j2
    dest: /etc/httpd/conf.d/www.{{hostname}}.conf
    owner: root
    group: root
    mode: '0644'

- name: Create index.html for website
  template:
    src: index.html.j2
    dest: /var/www/html/www.{{hostname}}/public_html/index.html
    owner: root
    group: root
    mode: '0644'
  notify:
  - Restart Apache

# 3.3 Utilizing a web server as a proxy
- name: Add user proxy
  user:
    name: proxy
    
- name: Install python3-pip
  dnf:
    name: python3-pip

- name: Install flask
  pip:
    name: flask

- name: Create /etc/systemd/system/proxy.service
  template:
    src: proxy.service.j2
    dest: /etc/systemd/system/proxy.service
    owner: proxy
    group: root
    mode: '0755'
    
- name: Create proxy /usr/local/lib/server.py
  template:
    src: server.py.j2
    dest: /usr/local/lib/server.py
    owner: proxy
    group: root
    mode: '0755'

- name: Create /etc/httpd/conf.d/proxy.conf
  template:
    src: proxy.conf.j2
    dest: /etc/httpd/conf.d/proxy.conf
    owner: root
    group: root
    mode: '0644'

- name: Set httpd_can_network_connect flag on and keep it persistent across reboots
  seboolean:
    name: httpd_can_network_connect
    state: true
    persistent: yes

- name: reload systemd
  command: systemctl daemon-reload

- name: Ensure MariaDB service is running
  systemd:
    name: proxy
    state: started
    enabled: true

# MariaDB
- name: Install WordPress packages
  dnf:
    name:
    - php-mysqlnd
    - php-fpm
    - mariadb-server
    - httpd
    - tar
    - curl
    - php-json
    - mod_security

- name: Ensure MariaDB service is running
  systemd:
    name: mariadb
    state: started
    enabled: true

# mysql_secure_installation # TODO

- name: Make sure pymysql is present
  pip:
    name: pymysql
    state: present

- name: Create /root/.my.cnf
  copy:
    src: .my.cnf
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: '0644'  

- name: Sets MySQL root password
  mysql_user: 
    name: root 
    password: "{{ mysql_root_password }}"  
    state: present

- name: Remove all anonymous user accounts
  mysql_user:
    name: ''
    host_all: true
    state: absent

- name: Remove MySQL test database
  mysql_db: 
    name: test
    state: absent


# 4. Let's add a default WordPress setup to our current setup

- name: Extract wordpress.tar.gz
  unarchive:
    src: https://wordpress.org/latest.tar.gz
    dest: /var/www/html
    remote_src: yes
    creates: /var/www/html/wordpress

- name: Set ownership of wordpress directory to apache:apache
  file:
    path: /var/www/html/wordpress
    state: directory
    owner: apache
    group: apache
    recurse: yes

- name: Sefcontext | this equates to 'chcon -t httpd_sys_rw_content_t /var/www/html/wordpress -R'
  sefcontext:
    target: '/var/www/html/wordpress(/.*)?'
    setype: httpd_sys_rw_content_t
    state: present

- name: Create WordPress log file 
  file:
    path: /var/log/httpd/php-errors.log
    owner: apache
    group: apache
    mode: '0644'
    access_time: preserve
    modification_time: preserve 
    state: touch

- name: Combine WordPress PHP logs
  replace:
    path: "{{item.file}}"
    regexp: "{{item.error_log}}"
    replace: /var/log/httpd/php-errors.log
  with_items:
  - {file: /etc/php-fpm.d/www.conf, error_log: /var/log/php-fpm/www-error.log}
  - {file: /etc/php-fpm.conf, error_log: /var/log/php-fpm/error.log}

- name: Ensure MariaDB service is running
  ansible.builtin.service:
    name: php-fpm
    state: started
    enabled: true


# 5. Configuring Apache modules
- name: Enable forensic logging
  ansible.builtin.lineinfile:
    path: /etc/httpd/conf/httpd.conf
    state: present
    regexp: "{{item}}"
    line: "{{item}}"
  with_items:
  - "LoadModule log_forensic_module modules/mod_log_forensic.so"

- name: Create forensic log file 
  file:
    path: "/var/log/httpd/{{item}}-forensic.log"
    owner: apache
    group: apache
    mode: '0644'
    access_time: preserve
    modification_time: preserve 
    state: touch
  with_items:
  - www.{{hostname}}
  - proxy

- name:  Security-hardening using mod_security
  ansible.builtin.lineinfile:
    path: /etc/httpd/modsecurity.d/local_rules/modsecurity_localrules.conf
    state: present
    regexp: "{{item}}"
    line: "{{item}}"
  with_items:
  - SecDefaultAction "phase:2,deny,log,status:406"
  - SecRule REQUEST_URI "etc/passwd" "id:'500001'"
  - SecRule REQUEST_URI "\.\./" "id:'500002'"
  - SecRule ARGS "<[Ss][Cc][Rr][Ii][Pp][Tt]" "id:'500003'"